-- USERSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "USERS" (
  "id" UUID PRIMARY KEY,
  "name" VARCHAR(50) NOT NULL,
  "email" VARCHAR(100) NOT NULL UNIQUE,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE,
  "is_active" BOOLEAN DEFAULT TRUE NOT NULL
);

-- IDEAL_LIFESTYLESテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "IDEAL_LIFESTYLES" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "description" TEXT NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- QUARTER_GOALSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "QUARTER_GOALS" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "lifestyle_id" INTEGER NOT NULL REFERENCES "IDEAL_LIFESTYLES"("id") ON DELETE CASCADE,
  "description" TEXT NOT NULL,
  "deadline" DATE NOT NULL,
  "is_achieved" BOOLEAN DEFAULT FALSE NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- MONTHLY_GOALSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "MONTHLY_GOALS" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "quarter_id" INTEGER NOT NULL REFERENCES "QUARTER_GOALS"("id") ON DELETE CASCADE,
  "description" TEXT NOT NULL,
  "deadline" DATE NOT NULL,
  "is_achieved" BOOLEAN DEFAULT FALSE NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- WEEKLY_GOALSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "WEEKLY_GOALS" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "monthly_goal_id" INTEGER NOT NULL REFERENCES "MONTHLY_GOALS"("id") ON DELETE CASCADE,
  "description" TEXT NOT NULL,
  "start_date" DATE NOT NULL,
  "end_date" DATE NOT NULL,
  "is_achieved" BOOLEAN DEFAULT FALSE NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- TODOSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "TODOS" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "weekly_goal_id" INTEGER NOT NULL REFERENCES "WEEKLY_GOALS"("id") ON DELETE CASCADE,
  "title" VARCHAR(100) NOT NULL,
  "priority" VARCHAR(10) DEFAULT 'MEDIUM' NOT NULL CHECK (priority IN ('HIGH', 'MEDIUM', 'LOW')),
  "deadline" TIMESTAMP WITH TIME ZONE NOT NULL,
  "is_completed" BOOLEAN DEFAULT FALSE NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- RESTRICT_RULEテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "Restrict_Rule" (
  "id" SERIAL PRIMARY KEY,
  "user_id" UUID NOT NULL REFERENCES "USERS"("id") ON DELETE CASCADE,
  "quarter_goal_id" INTEGER NOT NULL REFERENCES "QUARTER_GOALS"("id") ON DELETE CASCADE,
  "description" TEXT NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- RESTRICT_RULE_ITEMSテーブルが存在しない場合は作成
CREATE TABLE IF NOT EXISTS "RESTRICT_RULE_ITEMS" (
  "id" SERIAL PRIMARY KEY,
  "restrict_rule_id" INTEGER NOT NULL REFERENCES "Restrict_Rule"("id") ON DELETE CASCADE,
  "rule_text" VARCHAR(255) NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE
);

-- トリガー関数: updated_atを更新
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- テーブルにトリガーを追加する関数
DO $$
DECLARE
  tables TEXT[] := ARRAY['USERS', 'IDEAL_LIFESTYLES', 'QUARTER_GOALS', 'MONTHLY_GOALS', 'WEEKLY_GOALS', 'TODOS', 'Restrict_Rule', 'RESTRICT_RULE_ITEMS'];
  t TEXT;
BEGIN
  FOREACH t IN ARRAY tables
  LOOP
    EXECUTE format('
      DROP TRIGGER IF EXISTS set_updated_at ON %I;
      CREATE TRIGGER set_updated_at
      BEFORE UPDATE ON %I
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
    ', t, t);
  END LOOP;
END;
$$ LANGUAGE plpgsql; 